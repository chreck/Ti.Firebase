/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.firebase;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

// This proxy can be created by calling Tifirebase.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = FirebaseModule.class)
public class DatabaseReferenceProxy extends KrollProxy {
	private final class ValueEventHandler implements ValueEventListener {
		@Override
		public void onDataChange(DataSnapshot dataSnapshot) {
			String value = dataSnapshot.getValue(String.class);
			KrollDict payload = new KrollDict();
			payload.put("value", value);
			proxy.fireEvent(ONCHANGE, payload);
			Log.d(LCAT, "Value is: " + value);
		}

		@Override
		public void onCancelled(DatabaseError error) {
			Log.w(LCAT, "Failed to read value.", error.toException());
		}
	}

	private DatabaseReference databaseReference;
	private static final String LCAT = "FiBaProx";
	private static final String ONCHANGE = "onDataChange";
	private KrollProxy proxy;

	public DatabaseReferenceProxy(KrollProxy proxy) {
		super();
		this.proxy = proxy;
	}

	public DatabaseReferenceProxy createReference(DatabaseProxy databaseProxy,
			String refString) {
		DatabaseReferenceProxy referenceProxy = new DatabaseReferenceProxy(
				proxy);
		databaseReference = databaseProxy.database.getReference(refString);
		if (proxy.hasListeners(ONCHANGE)) {
			databaseReference.addValueEventListener(new ValueEventHandler());
		}
		return referenceProxy;
	}

	@Kroll.method
	public void setValue(String _ref, KrollDict _value) {
		if (databaseReference != null && _value != null) {
			databaseReference.setValue(_value);
		}
	}
}